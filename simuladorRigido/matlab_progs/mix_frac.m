function mix_frac(X1, Y1, time1,corte,vy)
%CREATEFIGURE(X1,Y1)
%  X1:  vector of x data
%  Y1:  vector of y data
x1=log(X1(2:end));
y1=log(Y1(2:end));
%  Auto-generated by MATLAB on 27-Sep-2010 14:32:26

% Create figure
figure1 = figure;

% Create axes
varx=max(time1(1:end-corte))*1.1;
%vary=max(mix)*1.3;
vary=vy;
axes1 = axes('Parent',figure1,'FontSize',16,'FontName','Times',...
    'DataAspectRatio',[varx*0.5 vary 0.01]);
ylim(axes1,[0.0 vary]);
xlim(axes1,[0.0 varx]);
R = corrcoef([x1' y1'])
coef = num2str(R(1,2)*R(1,2),2)

box(axes1,'on');
hold(axes1,'all');

% Create plot
plot1 = plot(X1,Y1,'Parent',axes1,'MarkerSize',4,'Marker','o',...
    'LineStyle','none',...
    'DisplayName','$computed$',...
    'Color',[0 0 0]);

% Create xlabel
xlabel('$t$','Interpreter','latex','FontSize',18,'FontName','Times');

% Create ylabel
ylabel('$\ell\, (t)$','Interpreter','latex','FontSize',18,'FontName','Times');

% Get xdata from plot
% xdata1 = get(plot1, 'xdata');
xdata1 = x1;
% Get ydata from plot
% ydata1 = get(plot1, 'ydata');
ydata1 = y1;
% Make sure data are column vectors
xdata1 = xdata1(:);
ydata1 = ydata1(:);

% Remove NaN values and warn
nanMask1 = isnan(xdata1(:)) | isnan(ydata1(:));
if any(nanMask1)
    warning('GenerateMFile:IgnoringNaNs', ...
        'Data points with NaN coordinates will be ignored.');
    xdata1(nanMask1) = [];
    ydata1(nanMask1) = [];
end

% Find x values for plotting the fit based on xlim
axesLimits1 = xlim(axes1);
xplot1 = linspace(axesLimits1(1), axesLimits1(2));

% Preallocate for "Show equations" coefficients
coeffs1 = cell(1,1);

% Find coefficients for polynomial (order = 2)
fitResults1 = polyfit(xdata1, ydata1, 1);
% Evaluate polynomial
yplot1 = exp(fitResults1(2))*xplot1.^(fitResults1(1));

% Save type of fit for "Show equations"
fittypesArray1(1) = 2;

% Save coefficients for "Show Equation"
coeffs1{1} = fitResults1;
%xplot1 = exp(xplot1);
%yplot1 = exp(yplot1);
% Plot the fit
fitLine1 = plot((xplot1),(yplot1),'DisplayName','   linear','Parent',axes1,...
    'Tag','linear',...
    'Color',[1 0 0],'LineWidth',2);

% Set new line in proper position
setLineOrder(axes1, fitLine1, plot1);

% "Show equations" was selected
showEquations(fittypesArray1, coeffs1, 2, axes1, coef);

% Create legend
% legend1 = legend(axes1,'show');
% set(legend1,'Interpreter','latex','Visible','off',...
%     'Position',[0.2325 0.5538 0.635 0.2774],...
%     'FontSize',14);
            legend1 = legend(...
              axes1,{...
              '$c\, o\, m\ p\, .$','$\ell(t)$'},...
              'FontName','times',...
              'FontSize',14,...
              'Position',[0.145 0.6 0.25 0.1849],...
              'Interpreter','latex');
            legend(legend1,'boxoff');

%-------------------------------------------------------------------------%
function setLineOrder(axesh1, newLine1, associatedLine1)
%SETLINEORDER(AXESH1,NEWLINE1,ASSOCIATEDLINE1)
%  Set line order
%  AXESH1:  axes
%  NEWLINE1:  new line
%  ASSOCIATEDLINE1:  associated line

% Get the axes children
hChildren = get(axesh1,'Children');
% Remove the new line
hChildren(hChildren==newLine1) = [];
% Get the index to the associatedLine
lineIndex = find(hChildren==associatedLine1);
% Reorder lines so the new line appears with associated data
hNewChildren = [hChildren(1:lineIndex-1);newLine1;hChildren(lineIndex:end)];
% Set the children:
set(axesh1,'Children',hNewChildren);

%-------------------------------------------------------------------------%
function showEquations(fittypes1, coeffs1, digits1, axesh1, coeff)
%SHOWEQUATIONS(FITTYPES1,COEFFS1,DIGITS1,AXESH1)
%  Show equations
%  FITTYPES1:  types of fits
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

n = length(fittypes1);
txt = cell(length(n + 1) ,1);
txt{1,:} = ' ';
for i = 1:n
    txt{i + 1,:} = getEquationString(fittypes1(i),coeffs1{i},digits1,axesh1);
end
txt2 = ['R=' coeff];
text(0.2,.875,txt,'parent',axesh1, ...
    'verticalalignment','top','units','normalized');
text(0.3,.75,txt2,'parent',axesh1, ...
    'verticalalignment','top','units','normalized');


%-------------------------------------------------------------------------%

%-------------------------------------------------------------------------%
function [s1] = getEquationString(fittype1, coeffs1, digits1, axesh1)
%GETEQUATIONSTRING(FITTYPE1,COEFFS1,DIGITS1,AXESH1)
%  Get show equation string
%  FITTYPE1:  type of fit
%  COEFFS1:  coefficients
%  DIGITS1:  number of significant digits
%  AXESH1:  axes

   s1 = ['=' num2str(exp(coeffs1(2)),'%0.3g') 't^{' num2str(coeffs1(1),'%0.2g') '}'];


